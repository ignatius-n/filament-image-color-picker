function C({image:s,state:r,format:c}){function l(t){let e=new Image;return e.src=t,new Promise((o,i)=>{e.complete?o(e):e.addEventListener("load",()=>o(e)),e.addEventListener("error",i)})}return{canvas:null,previewColor:null,previewColorTimeout:0,selectedColor:r,x:0,y:0,clientX:0,clientY:0,init(){let t=this.$refs.canvas;l(s).then(e=>{t.width=e.width,t.height=e.height;let o=t.getContext("2d");console.log(e.src),o.drawImage(e,0,0)}),this.canvas=t},onClick(t){this.selectColor(t),this.selectedColor=this.previewColor},selectColor(t){let{x:e,y:o}=this.getRelativeCoordinates(t.clientX,t.clientY),i=this.canvas.getContext("2d"),{data:n}=i.getImageData(e,o,1,1);this.previewColor=this.formatColor(n),this.x=e,this.y=o,this.clientX=t.clientX,this.clientY=t.clientY,clearTimeout(this.previewColorTimeout),this.previewColorTimeout=setTimeout(()=>this.previewColor=null,1500)},getRelativeCoordinates(t,e){let o=this.canvas,i=o.getBoundingClientRect(),n=o.width/i.width,a=o.height/i.height,h=(t-i.left)*n,d=(e-i.top)*a;return{x:h,y:d}},colorHex(t,e,o){return`#${[t,e,o].map(n=>n.toString(16).padStart(2,"0").toUpperCase()).join("")}`},colorRgb(t,e,o){return`rgb(${t}, ${e}, ${o})`},formatColor(t){return c==="hex"?this.colorHex(t[0],t[1],t[2]):this.colorRgb(t[0],t[1],t[2])}}}export{C as default};
